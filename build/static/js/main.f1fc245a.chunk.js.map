{"version":3,"sources":["serviceWorker.ts","reportWebVitals.ts","firebaseConfig.ts","ErrorComponent.tsx","firebaseLogic.ts","enums.ts","gameActions.ts","helpers.ts","components/ConfigMenu/index.ts","components/ConfigMenu/ConfigMenu.tsx","components/InGameMenu/index.ts","components/InGameMenu/InGameMenu.tsx","components/EnergyLevel/index.ts","components/EnergyLevel/EnergyLevel.tsx","components/Grade/index.ts","components/Grade/Grade.tsx","screens/Game/index.ts","screens/Game/Game.tsx","screens/Menu/index.ts","screens/Menu/Menu.tsx","ScreenManager.tsx","components/Spacer/Spacer.tsx","components/Spacer/index.ts","screens/Auth/index.ts","screens/Auth/Auth.tsx","screens/Splash/index.ts","screens/Splash/Splash.tsx","Init.tsx","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","firebase","apps","length","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","ErrorBoundary","hasError","errorInfo","this","props","children","Component","db","firestore","formatUserObject","user","playerId","uid","playerDisplayName","displayName","playerEmail","email","setCallback","a","auth","onAuthStateChanged","Screen","LoadType","signInWithPopup","authProvider","GoogleAuthProvider","signOut","getAndSetPlayerData","setPlayerData","collection","doc","get","data","playerData","lastGameState","getPlayerData","storeGameInDb","gameStateObject","update","activePlayerAtom","atom","playerDataAtom","activeScreenAtom","AUTH","isLoadingGameOfTypeAtom","NEW","toggleConfigMenuAtom","toggleInGameMenuAtom","gameIdAtom","gameStartTimeAtom","playerEnergyAtom","playerScoreAtom","playerLocationAtom","playerItemsAtom","id","name","type","loadSavedGameAction","set","gameId","gameStartTime","playerLocation","playerEnergy","playerScore","playerItems","createNewGameAction","_get","uuid","Date","now","saveGameStateAction","activePlayer","snapshot","playerAgreesToShareLocation","globalSignOutAction","startNewGameAction","GAME","loadLastGameAction","SAVED","computedGradeAndColor","letter","color","score","undefined","flatten","object","path","separator","Object","keys","reduce","acc","key","value","newPath","filter","join","RegExp","Array","isArray","every","ConfigMenu","useAtom","configMenu","toggleConfigMenu","gameState","listedProperties","obj","entries","map","i","className","Button","variant","onClick","InGameMenu","saveGameState","setActiveScreen","signOutHandler","MENU","EnergyLevel","energy","style","backgroundColor","criticalityColor","width","Grade","gradeAndColor","Game","inGameMenu","toggleInGameMenu","isLoadingGameOfType","loadSavedGame","createNewGame","setPlayerEnergy","loadSavedGameRef","useRef","createNewGameRef","useEffect","current","Menu","activeScreen","setIsLoadingGameOfType","startNewGame","loadLastGame","NONE","ScreenManager","skipMenu","Spacer","sizeAndUnit","height","Auth","Splash","Spinner","animation","Init","setActivePlayer","setActivePlayerRef","onUserStateChange","setPlayerDataRef","analytics","ReactDOM","render","StrictMode","fallback","document","getElementById","URL","process","toString","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","logEvent"],"mappings":"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","file":"static/js/main.f1fc245a.chunk.js","sourcesContent":["// tslint:disable:no-console\r\n// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the 'N+1' visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n\twindow.location.hostname === \"localhost\" ||\r\n\t\t// [::1] is the IPv6 localhost address.\r\n\t\twindow.location.hostname === \"[::1]\" ||\r\n\t\t// 127.0.0.1/8 is considered localhost for IPv4.\r\n\t\twindow.location.hostname.match(\r\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n\t\t)\r\n);\r\n\r\nexport default function register() {\r\n\tif (\"serviceWorker\" in navigator) {\r\n\t\t// The URL constructor is available in all browsers that support SW.\r\n\t\tconst publicUrl = new URL(\r\n\t\t\tprocess.env.PUBLIC_URL!,\r\n\t\t\twindow.location.toString()\r\n\t\t);\r\n\t\tif (publicUrl.origin !== window.location.origin) {\r\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\r\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\r\n\t\t\t// serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\twindow.addEventListener(\"load\", () => {\r\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n\t\t\tif (isLocalhost) {\r\n\t\t\t\t// This is running on localhost. Lets check if a service worker still exists or not.\r\n\t\t\t\tcheckValidServiceWorker(swUrl);\r\n\r\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\r\n\t\t\t\t// service worker/PWA documentation.\r\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\r\n\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t\"This web app is being served cache-first by a service \" +\r\n\t\t\t\t\t\t\t\"worker. To learn more, visit https://goo.gl/SC7cgQ\"\r\n\t\t\t\t\t);\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\t// Is not local host. Just register service worker\r\n\t\t\t\tregisterValidSW(swUrl);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n\r\nfunction registerValidSW(swUrl: string) {\r\n\tnavigator.serviceWorker\r\n\t\t.register(swUrl)\r\n\t\t.then((registration) => {\r\n\t\t\tregistration.onupdatefound = () => {\r\n\t\t\t\tconst installingWorker = registration.installing;\r\n\t\t\t\tif (installingWorker) {\r\n\t\t\t\t\tinstallingWorker.onstatechange = () => {\r\n\t\t\t\t\t\tif (installingWorker.state === \"installed\") {\r\n\t\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\r\n\t\t\t\t\t\t\t\t// At this point, the old content will have been purged and\r\n\t\t\t\t\t\t\t\t// the fresh content will have been added to the cache.\r\n\t\t\t\t\t\t\t\t// It's the perfect time to display a 'New content is\r\n\t\t\t\t\t\t\t\t// available; please refresh.' message in your web app.\r\n\t\t\t\t\t\t\t\tconsole.log(\"New content is available; please refresh.\");\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t// At this point, everything has been precached.\r\n\t\t\t\t\t\t\t\t// It's the perfect time to display a\r\n\t\t\t\t\t\t\t\t// 'Content is cached for offline use.' message.\r\n\t\t\t\t\t\t\t\tconsole.log(\"Content is cached for offline use.\");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t})\r\n\t\t.catch((error) => {\r\n\t\t\tconsole.error(\"Error during service worker registration:\", error);\r\n\t\t});\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string) {\r\n\t// Check if the service worker can be found. If it can't reload the page.\r\n\tfetch(swUrl)\r\n\t\t.then((response) => {\r\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\r\n\t\t\tif (\r\n\t\t\t\tresponse.status === 404 ||\r\n\t\t\t\tresponse.headers.get(\"content-type\")!.indexOf(\"javascript\") === -1\r\n\t\t\t) {\r\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\r\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\r\n\t\t\t\t\tregistration.unregister().then(() => {\r\n\t\t\t\t\t\twindow.location.reload();\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\t// Service worker found. Proceed as normal.\r\n\t\t\t\tregisterValidSW(swUrl);\r\n\t\t\t}\r\n\t\t})\r\n\t\t.catch(() => {\r\n\t\t\tconsole.log(\r\n\t\t\t\t\"No internet connection found. App is running in offline mode.\"\r\n\t\t\t);\r\n\t\t});\r\n}\r\n\r\nexport function unregister() {\r\n\tif (\"serviceWorker\" in navigator) {\r\n\t\tnavigator.serviceWorker.ready.then((registration) => {\r\n\t\t\tregistration.unregister();\r\n\t\t});\r\n\t}\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import firebase from \"firebase\";\r\n\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n\tapiKey: \"AIzaSyBUHmNHlurXkvkvxVfKfHeK-nyfMSpb-uA\",\r\n\tauthDomain: \"city-quest-native.firebaseapp.com\",\r\n\tprojectId: \"city-quest-native\",\r\n\tstorageBucket: \"city-quest-native.appspot.com\",\r\n\tmessagingSenderId: \"1047619952176\",\r\n\tappId: \"1:1047619952176:web:448dc5d4564c17613d17f5\",\r\n\tmeasurementId: \"G-G8KHGP2Y5Q\"\r\n};\r\n\r\nif (!firebase.apps.length) {\r\n\tfirebase.initializeApp(firebaseConfig);\r\n}\r\n\r\nexport default firebase;\r\n","import { Component } from \"react\";\r\n\r\nexport default class ErrorBoundary extends Component {\r\n    state = { hasError: false };\r\n\r\n\tstatic getDerivedStateFromError() {\r\n\t\treturn { hasError: true };\r\n\t}\r\n\r\n\tcomponentDidCatch(error: any, errorInfo: any) {\r\n\t\tconsole.log(error, errorInfo);\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (this.state.hasError) {\r\n\t\t\treturn <h1>Something went wrong.</h1>;\r\n\t\t}\r\n\r\n\t\treturn this.props.children;\r\n\t}\r\n}\r\n","import firebase from \"./firebaseConfig\";\r\n\r\nconst db = firebase.firestore();\r\n\r\n//** Firebase Auth Operations */\r\n\r\nconst formatUserObject = (user: firebase.User): ActivePlayer => {\r\n\treturn {\r\n\t\tplayerId: user.uid,\r\n\t\tplayerDisplayName: user.displayName || \"Anonymous\",\r\n\t\tplayerEmail: user.email || \"---\"\r\n\t};\r\n};\r\n\r\nexport async function onUserStateChange(\r\n\tsetCallback: Hookback<ActivePlayer | null>\r\n): Promise<ActivePlayer | void> {\r\n\tfirebase.auth().onAuthStateChanged((user: firebase.User | null) => {\r\n\t\tif (user !== null) {\r\n\t\t\tsetCallback(formatUserObject(user));\r\n\t\t} else setCallback(null);\r\n\t});\r\n}\r\n\r\nexport async function getCurrentUser(): Promise<ActivePlayer | null> {\r\n\tconst user: firebase.User | null = await firebase.auth().currentUser;\r\n\tif (user !== null) return formatUserObject(user);\r\n\treturn null;\r\n}\r\n\r\nexport const signInWithPopup = async (): Promise<void> => {\r\n\tconst authProvider = new firebase.auth.GoogleAuthProvider();\r\n\tawait firebase.auth().signInWithPopup(authProvider);\r\n};\r\n\r\nexport const signOut = async (): Promise<void> => {\r\n\tawait firebase.auth().signOut();\r\n};\r\n\r\n//** Firebase Firestore Operations */\r\n\r\n// TODO replace all instances of getPlayerData in codebase with getAndSetPlayerData\r\nexport const getAndSetPlayerData = async (\r\n\tplayerId: string,\r\n\tsetPlayerData: Hookback<PlayerData>\r\n): Promise<void> => {\r\n\tconst data = await (await db.collection(\"users\").doc(playerId).get()).data();\r\n\tsetPlayerData({\r\n\t\tplayerData: data?.playerData,\r\n\t\tlastGameState: data?.lastGameState\r\n\t});\r\n};\r\n\r\nexport const getPlayerData = async (\r\n\tplayerId: string\r\n): Promise<PlayerData | null> => {\r\n\tconst data = await (await db.collection(\"users\").doc(playerId).get()).data();\r\n\tif (data) return data as PlayerData;\r\n\treturn null;\r\n};\r\n\r\nexport const storeGameInDb = async (\r\n\tgameStateObject: GameState,\r\n\tplayerId: string\r\n): Promise<void> => {\r\n\tawait db\r\n\t\t.collection(\"users\")\r\n\t\t.doc(playerId)\r\n\t\t.update({\r\n\t\t\tlastGameState: { ...gameStateObject }\r\n\t\t});\r\n};\r\n","export enum Screen {\r\n\tAUTH,\r\n\tGAME,\r\n\tMENU\r\n}\r\n\r\nexport enum LoadType {\r\n\tNONE,\r\n\tNEW,\r\n\tSAVED\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport { atom } from \"jotai\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { getPlayerData, signOut, storeGameInDb } from \"./firebaseLogic\";\r\nimport { LoadType, Screen } from \"./enums\";\r\n\r\n// *** Set up game state atoms (get & set), actions (set) and aggregates (get) here\r\n// export const playerLocation = atom<Coordinates>((get) => return getPlayerLocation())\r\nexport const activePlayerAtom = atom<ActivePlayer | null>(null);\r\nexport const playerDataAtom = atom<PlayerData | null>(null);\r\nexport const activeScreenAtom = atom<number>(Screen.AUTH);\r\nexport const isLoadingGameOfTypeAtom = atom<number>(LoadType.NEW);\r\nexport const toggleConfigMenuAtom = atom<boolean>(false);\r\nexport const toggleInGameMenuAtom = atom<boolean>(false);\r\n\r\n//** In-game state atoms--add these to all the save and load actions below */\r\nexport const gameIdAtom = atom<string | undefined>(\"\");\r\nexport const gameStartTimeAtom = atom<number | undefined>(0);\r\nexport const gameTimerAtom = atom<number | undefined>(0);\r\nexport const playerEnergyAtom = atom<number | undefined>(100);\r\nexport const playerScoreAtom = atom<number | undefined>(100);\r\nexport const playerLocationAtom = atom<Coordinates | undefined>([0, 0]);\r\nexport const playerItemsAtom = atom<Array<GameObject> | undefined>([\r\n\t{ id: \"1\", name: \"Museum Hours\", type: \"Clue\" }\r\n]);\r\n\r\n//** KEEP UPDATING AS NEW ATOMS ARE ADDED */\r\nexport const loadSavedGameAction = atom(null, async (get, set) => {\r\n\tconst playerData = get(playerDataAtom);\r\n\t// const getAndLoadSavedGame = async () => {\r\n\t\tif (playerData) {\r\n\t\t\t// TODO get from cache or server depending if online and/or which is newer\r\n\t\t\t// TODO trigger a cache-to-server sync\r\n\t\t\tconst data = await getPlayerData(playerData.playerData.playerId);\r\n\t\t\tif (data) {\r\n\t\t\t\tconst { lastGameState } = data;\r\n\t\t\t\tset(gameIdAtom, lastGameState.gameId);\r\n\t\t\t\tset(gameStartTimeAtom, lastGameState.gameStartTime);\r\n\t\t\t\tset(playerLocationAtom, lastGameState.playerLocation);\r\n\t\t\t\tset(playerEnergyAtom, lastGameState.playerEnergy);\r\n\t\t\t\tset(playerScoreAtom, lastGameState.playerScore);\r\n\t\t\t\tset(playerItemsAtom, lastGameState.playerItems);\r\n\t\t\t}\r\n\t\t}\r\n\t// };\r\n\t// getAndLoadSavedGame();\r\n});\r\n\r\n//** KEEP UPDATING AS NEW ATOMS ARE ADDED */\r\nexport const createNewGameAction = atom(null, (_get, set) => {\r\n\tset(gameIdAtom, uuid());\r\n\tset(gameStartTimeAtom, Date.now());\r\n\tset(playerLocationAtom, [0, 0]);\r\n\tset(playerEnergyAtom, 100);\r\n\tset(playerScoreAtom, 100);\r\n\tset(playerItemsAtom, [{ id: \"1\", name: \"Museum Hours\", type: \"Clue\" }]);\r\n});\r\n\r\n//** KEEP UPDATING AS NEW ATOMS ARE ADDED */\r\nexport const saveGameStateAction = atom({} as GameState, (get, set) => {\r\n\tconst activePlayer = get(activePlayerAtom);\r\n\tconst snapshot: GameState = {\r\n\t\tgameId: get(gameIdAtom),\r\n\t\tgameStartTime: get(gameStartTimeAtom),\r\n\t\tplayerLocation: get(playerLocationAtom),\r\n\t\tplayerEnergy: get(playerEnergyAtom),\r\n\t\tplayerScore: get(playerScoreAtom),\r\n\t\tplayerItems: get(playerItemsAtom)\r\n\t};\r\n\tif (activePlayer) {\r\n\t\t// TODO send to cache or server depending if online\r\n\t\t// TODO trigger a cache-to-server sync\r\n\t\tstoreGameInDb(snapshot, activePlayer.playerId);\r\n\t}\r\n});\r\n\r\nexport const playerAgreesToShareLocation = atom(\r\n\tfalse as boolean,\r\n\t(get, set) => {\r\n\t\t// ask if user will share location\r\n\t\tset(playerAgreesToShareLocation, true);\r\n\t}\r\n);\r\n\r\nexport const globalSignOutAction = atom(null, (_get, set) => {\r\n\tset(activePlayerAtom, null);\r\n\tset(playerDataAtom, null);\r\n\tset(isLoadingGameOfTypeAtom, LoadType.NEW);\r\n\tset(toggleConfigMenuAtom, false);\r\n\tset(activeScreenAtom, Screen.AUTH);\r\n\tsignOut();\r\n});\r\n\r\nexport const startNewGameAction = atom(null, (_get, set) => {\r\n\tset(isLoadingGameOfTypeAtom, LoadType.NEW);\r\n\tset(toggleConfigMenuAtom, false);\r\n\tset(toggleInGameMenuAtom, false);\r\n\tset(activeScreenAtom, Screen.GAME);\r\n});\r\n\r\nexport const loadLastGameAction = atom(null, (_get, set) => {\r\n\tset(isLoadingGameOfTypeAtom, LoadType.SAVED);\r\n\tset(toggleConfigMenuAtom, false);\r\n\tset(toggleInGameMenuAtom, false);\r\n\tset(activeScreenAtom, Screen.GAME);\r\n});\r\n\r\nexport const computedGradeAndColor = atom(\r\n\t{ letter: \"A\", color: \"green\" } as GradeAndColor,\r\n\t(get, set) => {\r\n\t\tlet score = get(playerScoreAtom);\r\n\t\tif (score === undefined) score = 100;\r\n\t\tswitch (true) {\r\n\t\t\tcase score <= 15:\r\n\t\t\t\tset(computedGradeAndColor, {\r\n\t\t\t\t\tletter: \"F\",\r\n\t\t\t\t\tcolor: \"red\"\r\n\t\t\t\t} as GradeAndColor);\r\n\t\t\t\tbreak;\r\n\t\t\tcase score > 15 && score <= 30:\r\n\t\t\t\tset(computedGradeAndColor, {\r\n\t\t\t\t\tletter: \"E\",\r\n\t\t\t\t\tcolor: \"gold\"\r\n\t\t\t\t} as GradeAndColor);\r\n\t\t\t\tbreak;\r\n\t\t\tcase score > 30 && score <= 50:\r\n\t\t\t\tset(computedGradeAndColor, {\r\n\t\t\t\t\tletter: \"D\",\r\n\t\t\t\t\tcolor: \"orange\"\r\n\t\t\t\t} as GradeAndColor);\r\n\t\t\t\tbreak;\r\n\t\t\tcase score > 50 && score <= 70:\r\n\t\t\t\tset(computedGradeAndColor, {\r\n\t\t\t\t\tletter: \"C\",\r\n\t\t\t\t\tcolor: \"lightorange\"\r\n\t\t\t\t} as GradeAndColor);\r\n\t\t\t\tbreak;\r\n\t\t\tcase score > 70 && score <= 90:\r\n\t\t\t\tset(computedGradeAndColor, {\r\n\t\t\t\t\tletter: \"B\",\r\n\t\t\t\t\tcolor: \"yellow\"\r\n\t\t\t\t} as GradeAndColor);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tset(computedGradeAndColor, {\r\n\t\t\t\t\tletter: \"A\",\r\n\t\t\t\t\tcolor: \"green\"\r\n\t\t\t\t} as GradeAndColor);\r\n\t\t}\r\n\t}\r\n);\r\n\r\n// ? Try react-query for managing cache and db data syncronization\r\n// *** Allow caching of gamestate for later retrieval\r\nexport function useCachedState() {\r\n\tconst [cachedGameState, setCachedGameState] = useState(\r\n\t\t(): GameState => JSON.parse(localStorage.getItem(\"CQ_SAVE\") || \"{}\")\r\n\t);\r\n\r\n\tuseEffect(() => {\r\n\t\tlocalStorage.setItem(`CQ_SAVE`, JSON.stringify(cachedGameState));\r\n\t}, [cachedGameState]);\r\n\r\n\treturn [cachedGameState, setCachedGameState] as const;\r\n}\r\n\r\nexport const getCurrentLocation = (): Coordinates => {\r\n\t// TODO get and return current user location\r\n\treturn [43, 78];\r\n};\r\n\r\nexport const shouldSkipMainMenu = (data: PlayerData): boolean => {\r\n\tif (data?.playerData.skipMenu === true) return true;\r\n\treturn false;\r\n};\r\n\r\nexport const useGameTimer = () => {\r\n\tconst [isActive, toggleTimer] = useState(false);\r\n\tconst [time, setTimeValue] = useState(0);\r\n\tconst resetTimer = () => {\r\n\t\ttoggleTimer(false);\r\n\t\tsetTimeValue(0);\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tif (isActive) {\r\n\t\t\tsetInterval(() => {\r\n\t\t\t\tsetTimeValue((time) => time + 1);\r\n\t\t\t}, 1000);\r\n\t\t}\r\n\t\treturn () => clearInterval();\r\n\t});\r\n\r\n\treturn [time, toggleTimer, resetTimer] as const;\r\n};\r\n\r\n// ? //** SET UP A TIMER HOOK BELOW */\r\n//** https://css-tricks.com/using-requestanimationframe-with-react-hooks/ */\r\n\r\n// export const useAnimationFrame = (callback: any) => {\r\n// \t// Use useRef for mutable variables that we want to persist\r\n// \t// without triggering a re-render on their change\r\n// \tconst requestRef = useRef<number>(0);\r\n// \tconst previousTimeRef = useRef<number>(0);\r\n\r\n// \tconst animate = (time: number) => {\r\n// \t\tif (previousTimeRef.current !== undefined) {\r\n// \t\t\tconst deltaTime = time - previousTimeRef.current;\r\n// \t\t\tcallback(deltaTime);\r\n// \t\t}\r\n// \t\tpreviousTimeRef.current = time;\r\n// \t\trequestRef.current = requestAnimationFrame(animate);\r\n// \t};\r\n\r\n// \tuseEffect(() => {\r\n// \t\trequestRef.current = requestAnimationFrame(animate);\r\n// \t\treturn () => cancelAnimationFrame(requestRef.current);\r\n// \t}, []); // Make sure the effect runs only once\r\n// };\r\n\r\n//** GET USER LOCATION PERMISSION AND LOCATION  */\r\n\r\n// export const userAgreesToShareLocation = (gameConfig: GameConfig): boolean => {\r\n// \tif (gameConfig?.playerData?.userAgreesToShareLocation !== undefined) {\r\n// \t\treturn gameConfig.playerData.userAgreesToShareLocation;\r\n// \t} else {\r\n// \t\t// TODO get the user's permission to access their location\r\n// \t\treturn true;\r\n// \t}\r\n// };\r\n\r\n//** KEEP SYNC WITH CACHE USING REACT-QUERY */\r\n\r\n// const useSyncQueryValue = () => {\r\n//   const [value, setValue] = useAtom(queryDataAtom)\r\n//   useEffect(() => {\r\n//     return queryCache.subscribe(() => {\r\n//       setValue(queryCache.getQueryData(queryKey))\r\n//     })\r\n//   })\r\n// }\r\n\r\n//** SUBSCRIBE ATOMS TO DATA SOURCE  */\r\n\r\n// https://ask.csdn.net/questions/6203199\r\n// // define an atom\r\n// const dataAtom = atom(null)\r\n// // define an atom initializer\r\n\r\n// const initializeDataAtom = async (set) => {\r\n//   const unsubscribe = subscribeToData(set)\r\n//   (async () => { set(await fetchData()) })()\r\n//   return unsubscribe\r\n// }\r\n\r\n// // list all atoms with initializer\r\n// const atomsWithInitializer = [\r\n//   [dataAtom, initializeDataAtom]\r\n// ]\r\n\r\n// // internal component\r\n// const InitializeAtom = ({ atom, initialize }) => {\r\n//   const [value, setValue] = useAtom(atom)\r\n//   useEffect(() => {\r\n//     return initialize(setValue)\r\n//   }, [setValue])\r\n//   return null\r\n// }\r\n\r\n// // component to initialize atoms recursively\r\n// const InitializeAtoms = ({ atoms, children }) =>\r\n//   atoms.reduceRight(a, [atom, initialize] =>\r\n//     React.createElement(InitializeAtom, { atom, initialize }, a),\r\n//     children,\r\n//   }\r\n\r\n// // How to use\r\n// const App = () => (\r\n//   <provider>\r\n//     <initializeatoms atoms=\"{atomsWithInitializer}\">\r\n//       <mainlayout></mainlayout>\r\n//     </initializeatoms>\r\n//   </provider>\r\n// )\r\n","export function flatten<T extends Record<string, any>>(\r\n\tobject: T,\r\n\tpath: string | null = null,\r\n\tseparator = \".\"\r\n): T {\r\n\treturn Object.keys(object).reduce((acc: T, key: string): T => {\r\n\t\tconst value = object[key];\r\n\r\n\t\tconst newPath = [path, key].filter(Boolean).join(separator);\r\n\r\n\t\tconst isObject = [\r\n\t\t\ttypeof value === \"object\",\r\n\t\t\tvalue !== null,\r\n\t\t\t!(value instanceof Date),\r\n\t\t\t!(value instanceof RegExp),\r\n\t\t\t!(Array.isArray(value) && value.length === 0)\r\n\t\t].every(Boolean);\r\n\r\n\t\treturn isObject\r\n\t\t\t? { ...acc, ...flatten(value, newPath, separator) }\r\n\t\t\t: { ...acc, [newPath]: value };\r\n\t}, {} as T);\r\n}\r\n","import ConfigMenu from \"./ConfigMenu\";\r\nexport default ConfigMenu;\r\n","import React from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { useAtom } from \"jotai\";\r\nimport {\r\n\tactivePlayerAtom,\r\n\tsaveGameStateAction,\r\n\ttoggleConfigMenuAtom,\r\n\tplayerDataAtom,\r\n} from \"../../gameActions\";\r\nimport { flatten } from \"../../helpers\";\r\nimport \"./ConfigMenu.scss\";\r\n\r\nconst ConfigMenu = () => {\r\n\tconst [configMenu, toggleConfigMenu] = useAtom(toggleConfigMenuAtom);\r\n\tconst [gameState] = useAtom(saveGameStateAction);\r\n\tconst [activePlayer] = useAtom(activePlayerAtom);\r\n\tconst [playerData] = useAtom(playerDataAtom);\r\n\r\n\tconst listedProperties = (obj: any) => {\r\n\t\tconst entries = flatten(obj);\r\n\t\tconst elements = Object.entries(entries).map(([key, value], i) => {\r\n\t\t\treturn <li key={i} className=\"configmenu__li\">{`${key} ==> ${value}`}</li>;\r\n\t\t});\r\n\t\treturn elements;\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className='configmenu'>\r\n\t\t\t<Button variant='dark' onClick={() => toggleConfigMenu(!configMenu)}>\r\n\t\t\t\tToggle Debug Menu\r\n\t\t\t</Button>\r\n\t\t\t<ul className=\"configmenu__ul\">\r\n\t\t\t\t{listedProperties(activePlayer)}\r\n\t\t\t\t{listedProperties(playerData)}\r\n\t\t\t\t{listedProperties(gameState)}\r\n\t\t\t</ul>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default ConfigMenu;\r\n","import InGameMenu from \"./InGameMenu\";\r\nexport default InGameMenu;\r\n","import { useAtom } from \"jotai\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { Screen } from \"../../enums\";\r\nimport {\r\n\tactivePlayerAtom,\r\n\tglobalSignOutAction,\r\n\ttoggleConfigMenuAtom,\r\n\tsaveGameStateAction,\r\n\tactiveScreenAtom\r\n} from \"../../gameActions\";\r\nimport ConfigMenu from \"../ConfigMenu\";\r\nimport \"./InGameMenu.scss\";\r\n\r\nconst InGameMenu: React.FC = () => {\r\n\tconst [configMenu, toggleConfigMenu] = useAtom(toggleConfigMenuAtom);\r\n\tconst [activePlayer] = useAtom(activePlayerAtom);\r\n\tconst [, saveGameState] = useAtom(saveGameStateAction);\r\n\tconst [, setActiveScreen] = useAtom(activeScreenAtom);\r\n\tconst [, signOutHandler] = useAtom(globalSignOutAction);\r\n\r\n\treturn (\r\n\t\t<div className='ingamemenu'>\r\n\t\t\t{configMenu && <ConfigMenu />}\r\n\t\t\t<p className='ingamemenu__heading'>\r\n\t\t\t\tCurrent Player: {activePlayer?.playerDisplayName}\r\n\t\t\t</p>\r\n\t\t\t<Button\r\n\t\t\t\tvariant='dark'\r\n\t\t\t\tonClick={() => signOutHandler()}\r\n\t\t\t\tclassName='ingamemenu__btn'\r\n\t\t\t>\r\n\t\t\t\tSign Out\r\n\t\t\t</Button>\r\n\t\t\t<Button\r\n\t\t\t\tvariant='dark'\r\n\t\t\t\tonClick={() => {\r\n\t\t\t\t\tsetActiveScreen(Screen.MENU);\r\n\t\t\t\t}}\r\n\t\t\t\tclassName='ingamemenu__btn'\r\n\t\t\t>\r\n\t\t\t\tMain Menu\r\n\t\t\t</Button>\r\n\t\t\t<Button\r\n\t\t\t\tvariant='dark'\r\n\t\t\t\tonClick={() => saveGameState()}\r\n\t\t\t\tclassName='ingamemenu__btn'\r\n\t\t\t>\r\n\t\t\t\tSave Game\r\n\t\t\t</Button>\r\n\t\t\t<Button\r\n\t\t\t\tvariant='dark'\r\n\t\t\t\tonClick={() => toggleConfigMenu(!configMenu)}\r\n\t\t\t\tclassName='ingamemenu__btn'\r\n\t\t\t>\r\n\t\t\t\tShow Config Menu\r\n\t\t\t</Button>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default InGameMenu;\r\n","import EnergyLevel from './EnergyLevel';\r\nexport default EnergyLevel;","import { useAtom } from \"jotai\";\r\nimport { playerEnergyAtom } from \"../../gameActions\";\r\nimport \"./EnergyLevel.scss\";\r\n\r\nconst EnergyLevel = () => {\r\n\tconst [energy] = useAtom(playerEnergyAtom);\r\n\tconst criticalityColor = () => {\r\n\t\tif (energy) {\r\n\t\t\tif (energy <= 15) {\r\n\t\t\t\treturn \"red\";\r\n\t\t\t} else if (energy > 15 && energy <= 45) {\r\n\t\t\t\treturn \"orange\";\r\n\t\t\t} else if (energy > 45 && energy <= 75) {\r\n\t\t\t\treturn \"yellow\";\r\n\t\t\t} else {\r\n\t\t\t\treturn \"green\";\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\treturn (\r\n\t\t<div className='energylevel'>\r\n\t\t\t<div\r\n\t\t\t\tclassName='energylevel__bar'\r\n\t\t\t\tstyle={{ backgroundColor: criticalityColor(), width: `${energy}px` }}\r\n\t\t\t></div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default EnergyLevel;\r\n","import Grade from \"./Grade\";\r\nexport default Grade;\r\n","import { useAtom } from \"jotai\";\r\nimport { computedGradeAndColor } from \"../../gameActions\";\r\nimport \"./Grade.scss\";\r\n\r\nconst Grade = () => {\r\n\tconst [gradeAndColor] = useAtom(computedGradeAndColor);\r\n\treturn (\r\n\t\t<div className='grade'>\r\n\t\t\t<span className='grade__letter' style={{ color: gradeAndColor.color }}>\r\n\t\t\t\t{gradeAndColor.letter}\r\n\t\t\t</span>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Grade;\r\n","import Game from \"./Game\";\r\nexport default Game;\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport { useAtom } from \"jotai\";\r\nimport {\r\n\tplayerEnergyAtom,\r\n\ttoggleInGameMenuAtom,\r\n\ttoggleConfigMenuAtom,\r\n\tisLoadingGameOfTypeAtom,\r\n\tloadSavedGameAction,\r\n\tcreateNewGameAction\r\n} from \"../../gameActions\";\r\nimport { LoadType } from \"../../enums\";\r\nimport InGameMenu from \"../../components/InGameMenu\";\r\nimport EnergyLevel from \"../../components/EnergyLevel\";\r\nimport Grade from \"../../components/Grade\";\r\nimport SvgIcon from \"@material-ui/icons/Settings\";\r\nimport \"./Game.scss\";\r\n\r\nexport default function Game() {\r\n\tconst [inGameMenu, toggleInGameMenu] = useAtom(toggleInGameMenuAtom);\r\n\tconst [isLoadingGameOfType] = useAtom(isLoadingGameOfTypeAtom);\r\n\tconst [, loadSavedGame] = useAtom(loadSavedGameAction);\r\n\tconst [, createNewGame] = useAtom(createNewGameAction);\r\n\tconst [, toggleConfigMenu] = useAtom(toggleConfigMenuAtom);\r\n\r\n\tconst [playerEnergy, setPlayerEnergy] = useAtom(playerEnergyAtom);\r\n\r\n\tconst loadSavedGameRef = useRef(loadSavedGame);\r\n\tconst createNewGameRef = useRef(createNewGame);\r\n\tuseEffect(() => {\r\n\t\tif (isLoadingGameOfType === LoadType.SAVED) loadSavedGameRef.current();\r\n\t\tif (isLoadingGameOfType === LoadType.NEW) createNewGameRef.current();\r\n\t}, [isLoadingGameOfType]);\r\n\r\n\treturn (\r\n\t\t<main className='game'>\r\n\t\t\t<SvgIcon\r\n\t\t\t\tclassName='game__modal-icon'\r\n\t\t\t\tonClick={() => {\r\n\t\t\t\t\ttoggleInGameMenu(!inGameMenu);\r\n\t\t\t\t\ttoggleConfigMenu(false);\r\n\t\t\t\t}}\r\n\t\t\t/>\r\n\t\t\t{inGameMenu && <InGameMenu />}\r\n\t\t\t<section className='game__hud'>\r\n\t\t\t\t<EnergyLevel />\r\n\t\t\t\t{/* <ItemsListButton>\r\n\t\t\t\t\t<ItemsList items={items} />\r\n\t\t\t\t</ItemsListButton> */}\r\n\t\t\t\t<Grade />\r\n\t\t\t</section>\r\n\t\t\t<section className='game__media'></section>\r\n\t\t\t{/**\r\n\t\t\t * <MediaContainer />\r\n\t\t\t * <InfoBar />\r\n\t\t\t * <Map />\r\n\t\t\t */}\r\n\t\t\t<section className='game__info'></section>\r\n\t\t\t<section className='game__map'>\r\n\t\t\t\t<button\r\n\t\t\t\t\ttype='button'\r\n\t\t\t\t\tonClick={() =>\r\n\t\t\t\t\t\tsetPlayerEnergy(playerEnergy === 100 ? 100 : (playerEnergy || 100) + 1)\r\n\t\t\t\t\t}\r\n\t\t\t\t>\r\n\t\t\t\t\tIncrease Energy\r\n\t\t\t\t</button>\r\n\t\t\t\t<button\r\n\t\t\t\t\ttype='button'\r\n\t\t\t\t\tonClick={() =>\r\n\t\t\t\t\t\tsetPlayerEnergy(playerEnergy === 0 ? 0 : (playerEnergy || 100) - 1)\r\n\t\t\t\t\t}\r\n\t\t\t\t>\r\n\t\t\t\t\tDecrease Energy\r\n\t\t\t\t</button>\r\n\t\t\t</section>\r\n\t\t</main>\r\n\t);\r\n}\r\n","import Menu from \"./Menu\";\r\nexport default Menu;\r\n","import React from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { useAtom } from \"jotai\";\r\nimport {\r\n\tglobalSignOutAction,\r\n\tstartNewGameAction,\r\n\tloadLastGameAction,\r\n\tactiveScreenAtom,\r\n\ttoggleConfigMenuAtom,\r\n\ttoggleInGameMenuAtom,\r\n\tisLoadingGameOfTypeAtom\r\n} from \"../../gameActions\";\r\nimport { LoadType, Screen } from \"../../enums\";\r\n\r\nexport default function Menu() {\r\n\tconst [activeScreen, setActiveScreen] = useAtom(activeScreenAtom);\r\n\tconst [, setIsLoadingGameOfType] = useAtom(isLoadingGameOfTypeAtom);\r\n\tconst [, toggleInGameMenu] = useAtom(toggleInGameMenuAtom);\r\n\tconst [, toggleConfigMenu] = useAtom(toggleConfigMenuAtom);\r\n\tconst [, signOutHandler] = useAtom(globalSignOutAction);\r\n\tconst [, startNewGame] = useAtom(startNewGameAction);\r\n\tconst [, loadLastGame] = useAtom(loadLastGameAction);\r\n\r\n\treturn (\r\n\t\t<main className='menu'>\r\n\t\t\t<h1 className='menu__title'>City Quest</h1>\r\n\t\t\t<div>\r\n\t\t\t\t{activeScreen === Screen.MENU && (\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\tvariant='dark'\r\n\t\t\t\t\t\tclassName='menu__btn'\r\n\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\ttoggleConfigMenu(false);\r\n\t\t\t\t\t\t\ttoggleInGameMenu(false);\r\n\t\t\t\t\t\t\tsetIsLoadingGameOfType(LoadType.NONE);\r\n\t\t\t\t\t\t\tsetActiveScreen(Screen.GAME);\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tBack to Gameplay\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t)}\r\n\t\t\t\t<Button\r\n\t\t\t\t\tvariant='dark'\r\n\t\t\t\t\tclassName='menu__btn'\r\n\t\t\t\t\tonClick={() => startNewGame()}\r\n\t\t\t\t>\r\n\t\t\t\t\tNew Game\r\n\t\t\t\t</Button>\r\n\t\t\t\t<Button\r\n\t\t\t\t\tvariant='dark'\r\n\t\t\t\t\tclassName='menu__btn'\r\n\t\t\t\t\tonClick={() => loadLastGame()}\r\n\t\t\t\t>\r\n\t\t\t\t\tLoad Last Game\r\n\t\t\t\t</Button>\r\n\t\t\t\t<Button\r\n\t\t\t\t\tvariant='dark'\r\n\t\t\t\t\tclassName='menu__btn'\r\n\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t\t\"https://console.firebase.google.com/u/0/project/city-quest-native/overview\"\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\tLearn\r\n\t\t\t\t</Button>\r\n\t\t\t\t<Button\r\n\t\t\t\t\tvariant='dark'\r\n\t\t\t\t\tclassName='menu__btn'\r\n\t\t\t\t\tonClick={() => signOutHandler()}\r\n\t\t\t\t>\r\n\t\t\t\t\tSign Out\r\n\t\t\t\t</Button>\r\n\t\t\t</div>\r\n\t\t</main>\r\n\t);\r\n}\r\n","import { ReactElement } from \"react\";\r\nimport { useAtom } from \"jotai\";\r\nimport Game from \"./screens/Game\";\r\nimport Menu from \"./screens/Menu\";\r\nimport {\r\n\tplayerDataAtom,\r\n\tactiveScreenAtom,\r\n\tisLoadingGameOfTypeAtom\r\n} from \"./gameActions\";\r\nimport { LoadType, Screen } from \"./enums\";\r\n\r\nexport default function ScreenManager(): ReactElement {\r\n\tconst [user] = useAtom(playerDataAtom);\r\n\tconst [activeScreen] = useAtom(activeScreenAtom);\r\n\tconst [, setIsLoadingGameOfType] = useAtom(isLoadingGameOfTypeAtom);\r\n\r\n\tif (activeScreen === Screen.AUTH)\r\n\t\tif (user?.playerData.skipMenu) {\r\n\t\t\tsetIsLoadingGameOfType(LoadType.SAVED);\r\n\t\t\treturn <Game />;\r\n\t\t} else return <Menu />;\r\n\tif (activeScreen === Screen.GAME) return <Game />;\r\n\treturn <Menu />;\r\n}\r\n","import { FunctionComponent } from \"react\";\r\n\r\ntype ViewProps = {\r\n\tclassName?: string;\r\n\tsizeAndUnit?: string;\r\n}\r\n\r\nconst Spacer: FunctionComponent<ViewProps> = ({\r\n\tclassName,\r\n\tsizeAndUnit\r\n}: ViewProps) => {\r\n\treturn (\r\n\t\t<div\r\n\t\t\tclassName={`spacer ${className}`}\r\n\t\t\tstyle={{ height: sizeAndUnit || \"1rem\" }}\r\n\t\t></div>\r\n\t);\r\n};\r\n\r\nexport default Spacer;\r\n","import Spacer from \"./Spacer\";\r\nexport default Spacer;\r\n","import Auth from \"./Auth\";\r\nexport default Auth;\r\n","import Button from \"react-bootstrap/Button\";\r\nimport Spacer from \"../../components/Spacer\";\r\nimport { signInWithPopup } from \"../../firebaseLogic\";\r\nimport \"./Auth.scss\";\r\n\r\nexport default function Auth() {\r\n\treturn (\r\n\t\t<main className='auth'>\r\n\t\t\t<h1 className='auth__title'>You must authenticate.</h1>\r\n\t\t\t<Spacer />\r\n\t\t\t<Button\r\n\t\t\t\tvariant='dark'\r\n\t\t\t\tclassName='auth__btn'\r\n\t\t\t\tonClick={() => signInWithPopup()}\r\n\t\t\t>\r\n\t\t\t\tAuthenticate with Google\r\n\t\t\t</Button>\r\n\t\t</main>\r\n\t);\r\n}\r\n","import Splash from \"./Splash\";\r\nexport default Splash;\r\n","import React from \"react\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport \"./Splash.scss\";\r\n\r\nconst Splash = () => {\r\n\treturn (\r\n\t\t<main className='splash'>\r\n\t\t\t<div className='splash__spinnergrp'>\r\n\t\t\t\t<Spinner animation='grow' className='splash__spinnergrp-spinner' />\r\n\t\t\t\t<Spinner animation='grow' className='splash__spinnergrp-spinner' />\r\n\t\t\t\t<Spinner animation='grow' className='splash__spinnergrp-spinner' />\r\n\t\t\t</div>\r\n\t\t</main>\r\n\t);\r\n};\r\n\r\nexport default Splash;\r\n","import React, { useEffect, useRef } from \"react\";\nimport { useAtom } from \"jotai\";\nimport { onUserStateChange, getAndSetPlayerData } from \"./firebaseLogic\";\nimport { activePlayerAtom, playerDataAtom } from \"./gameActions\";\nimport ScreenManager from \"./ScreenManager\";\nimport Auth from \"./screens/Auth\";\nimport Splash from \"./screens/Splash\";\n\nexport default function Init() {\n\tconst [activePlayer, setActivePlayer] = useAtom(activePlayerAtom);\n\tconst [playerData, setPlayerData] = useAtom(playerDataAtom);\n\n\tconst setActivePlayerRef = useRef(setActivePlayer);\n\tuseEffect(() => {\n\t\tonUserStateChange(setActivePlayerRef.current);\n\t}, []);\n\n\tconst setPlayerDataRef = useRef(setPlayerData);\n\tuseEffect(() => {\n\t\tif (activePlayer) {\n\t\t\tgetAndSetPlayerData(activePlayer.playerId, setPlayerDataRef.current);\n\t\t}\n\t}, [activePlayer]);\n\n\tif (!activePlayer) return <Auth />;\n\tif (activePlayer && playerData) return <ScreenManager />;\n\treturn <Splash />;\n}\n","import React, { Suspense } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"jotai\";\nimport registerServiceWorker from \"./serviceWorker\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport firebase from \"./firebaseConfig\";\nimport ErrorBoundary from \"./ErrorComponent\";\nimport Init from \"./Init\";\nimport Splash from \"./screens/Splash\";\nimport \"./globalStyles/reset.scss\";\nimport \"./globalStyles/base.scss\";\n\nconst analytics: firebase.analytics.Analytics = firebase.analytics();\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<ErrorBoundary>\n\t\t\t<Provider>\n\t\t\t\t<Suspense fallback={<Splash />}>\n\t\t\t\t\t<Init />\n\t\t\t\t</Suspense>\n\t\t\t</Provider>\n\t\t</ErrorBoundary>\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\nregisterServiceWorker();\nreportWebVitals(analytics.logEvent); // Pass in Google Analytics endpoint here (https://bit.ly/CRA-vitals)\n"],"sourceRoot":""}